const async = require('async');
const fs = require('fs');
const path = require('path');
const markdownIt = require('markdown-it');

module.exports = function(env, callback) {
  class MarkdownItPage extends env.plugins.MarkdownPage {
    constructor(filepath, metadata, markdown) {
      super();
      this.filepath = filepath;
      this.metadata = metadata;
      this.markdown = markdown;
    }

    getHtml(base = env.config.baseUrl) {
      // Init markdown-it
      const md = markdownIt({ html: true });

      // Add plugins
      // code highlight
      md.use(require('markdown-it-prism'));

      // resolve links and images
      // md.use(require('./resolve_links')(this, base));
      // md.use(require('./resolve_images')(this, base));

      // resolve partial includes
      // for a page partials must be in same filepath directory under an
      // directory with same name filename with an underscore prefix:
      // ie. for /path/to/page/colours.md => /path/to/page/_colours/(*.md|*.pug)
      const fileName = path.basename(this.filepath.full);
      const partialsDir = `_${fileName.replace(path.extname(fileName), '')}`;
      const partialsRoot = this.filepath.full.replace(fileName, partialsDir);
      md.use(require('./resolve-include'), {
        root: partialsRoot,
        fileName,
        metadata: this.metadata
      });

      // enable html content md
      md.use(require('markdown-it-html'));

      // enable add html attributes to md elements
      md.use(require('markdown-it-attrs'));

      // Render content
      return md.render(this.markdown);
    }
  }

  MarkdownItPage.fromFile = (filepath, callback) => {
    return async.waterfall(
      [
        callback => fs.readFile(filepath.full, callback),
        (buffer, callback) =>
          MarkdownItPage.extractMetadata(buffer.toString(), callback),
        ({ markdown, metadata }, callback) =>
          callback(null, new MarkdownItPage(filepath, metadata, markdown))
      ],
      callback
    );
  };

  env.registerContentPlugin('pages', '**/*.*(markdown|mkd|md)', MarkdownItPage);
  return callback();
};
