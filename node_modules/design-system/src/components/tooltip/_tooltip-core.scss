@import "../../settings/settings";
@import "../../tools/dimensions";
@import "../../tools/message-types";
@import "../../tools/stacking-context";
@import "../../tools/breakpoints";

@import "../../elements/fonts/fonts-core";

$tooltip-shadow-size: 4px;
$tooltip-shadow-offset: 1px;
$tooltip-arrow-size: 12px;

/// TODO: the size value might need to be updated with design review
$tooltip-width-sizes: (
  sm: 200px,
  md: 300px,
  lg: 350px
);

$tooltip-position-x: (
  left: (
    name: l,
    arrow-angle: 135deg
  ),
  right: (
    name: r,
    arrow-angle: -45deg
  )
);

$tooltip-position-y: (
  top: (
    name: t,
    arrow-angle: -135deg
  ),
  bottom: (
    name: b,
    arrow-angle: 45deg
  )
);

/// tooltip
@mixin tooltip {
  background-color: $color-white;
  border-radius: 4px;
  box-shadow: 0 $tooltip-shadow-offset $tooltip-shadow-size 0 $dropshadow-color;
  padding: spacing(medium);
  color: $color-black;
  position: absolute;
  z-index: z-index(1);
  width: map_get($tooltip-width-sizes, sm);
}

/// tooltip-position
/// @param {String} $position
/// @param {String} $alignment
/// Place the tooltip on the desired dimension and adjust alignment & margin for the arrow(tip) by using opposite direction
@mixin tooltip-position($position, $alignment, $reset: false) {
  $opposite-direction: opposite-direction($position);

  @if ($reset) {
    margin: 0;
    #{$position}: unset;
    #{opposite-direction($alignment)}: unset;
  }

  margin-#{$opposite-direction}: spacing(medium);
  #{$opposite-direction}: 100%;
  #{$alignment}: 0;
}

/// tooltip-arrow-base
@mixin tooltip-arrow-base {
  background-color: inherit;
  border-radius: 2px;
  box-shadow: 2px 2px 3px rgba($color-gray, 0.1);
  content: "";
  position: absolute;
  height: $tooltip-arrow-size;
  width: $tooltip-arrow-size;
}

/// tooltip-arrow-position
/// @param {String} $tip-pointer [top] one of (left, top, right, bottom)
/// @param {String} $tip-bottom [left] one of (left, top, right, bottom)
/// The arrow(tip) rotates to apply correct box shadow per direction
@mixin tooltip-arrow-position(
  $tip-pointer: top,
  $tip-bottom: left,
  $reset: false
) {
  $angle: get(
    "#{$tip-pointer}.arrow-angle",
    map_merge($tooltip-position-x, $tooltip-position-y)
  );

  @if ($reset) {
    #{opposite-direction($tip-bottom)}: unset;
    #{opposite-direction($tip-pointer)}: unset;
  }

  #{$tip-bottom}: $pixel-grid-base * 2;
  #{$tip-pointer}: -4px;
  transform: rotate(#{$angle});
}

/// tooltip-with-arrow
/// @param {String} $position one of (left, top, right, bottom) will be used to create a space and an arrow(tip) on the opposite side
/// @param {String} $alignment one of (left, top, right, bottom) will be 0 to align the tooltip's arrow(tip) to the content
/// @param {String} $arrow-selector [&::before] css selector to the children element that will be styled as the tip arrow. Ideally it should style a pseudo element (&::after | &::before), though it can be any other children node.
/// @param {Boolean} $reset [false] to reset overwriting the position properties, i.e having multiple positions per breakpoint
///
/// @example
///    // Usage:
///    .tooltip--position-lt {
///      @include tooltip-with-arrow(left, top);
///    }
///
///    // Output:
///    .tooltip--position-lt {
///      margin-right: 16px;
///      right: 100%;
///      top: 0;
///    }
///    .tooltip--position-lt::before { // $arrow-selector element.
///      top: 16px;
///      right: -4px;
///      transform: rotate(-45deg);
///    }
@mixin tooltip-with-arrow(
  $position,
  $alignment,
  $arrow-selector: "&::before",
  $reset: false
) {
  @include tooltip-position($position, $alignment, $reset);

  #{$arrow-selector} {
    @include tooltip-arrow-position(
      opposite-direction($position),
      $alignment,
      $reset
    );
  }
}

/// Create properties per tooltip position
/// top-left [position-alignment] - (name: tr, position: top, alignment: left)
@function tooltip-position-options() {
  $results: ();

  @each $position-x in map_keys($tooltip-position-x) {
    $name-x: get("#{$position-x}.name", $tooltip-position-x);

    @each $position-y in map_keys($tooltip-position-y) {
      $name-y: get("#{$position-y}.name", $tooltip-position-y);

      $results: append(
        $results,
        (
          name: str-insert($name-x, $name-y, 2),
          position: $position-x,
          alignment: $position-y
        )
      );

      $results: append(
        $results,
        (
          name: str-insert($name-y, $name-x, 2),
          position: $position-y,
          alignment: $position-x
        )
      );
    }
  }

  @return $results;
}
