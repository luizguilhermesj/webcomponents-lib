@import "../../settings/colors";
@import "../../tools/dimensions";
@import "../../elements/fonts/fonts-core";
@import "../../elements/forms/icons/icons-core";

$button-margin: 0;
$button-radius: 2px;
$button-text-color: $text-color;

$button-font-style: bold-caps;
$button-line-height-factor: 1.4;

$button-narrow-padding: spacing(0.5);
$button-opacity-disabled: 0.5;

$button-sizes: (
  xxs: (
    font: 11px,
    height: spacing(large),
    padding: spacing(0.5),
    name: xtiny
  ),
  xs: (
    font: 11px,
    height: spacing(xlarge),
    padding: spacing(1.5),
    name: tiny
  ),
  sm: (
    font: 12px,
    height: spacing(xxlarge),
    padding: spacing(medium),
    name: small
  ),
  md: (
    font: 12px,
    height: spacing(6),
    padding: spacing(2.5),
    name: medium
  ),
  lg: (
    font: 16px,
    height: spacing(7),
    padding: spacing(large),
    name: large
  )
);

/// default styles are same as the secondary button types
$button-schemes: (
  default: (
    default: (
      base: default,
      hover: action-filled
    ),
    light: (
      base: light-hollow,
      hover: light-filled
    ),
    action: (
      base: action-hollow,
      hover: action-filled
    ),
    danger: (
      base: danger-hollow,
      hover: danger-filled
    ),
    mono: (
      base: mono-filled,
      hover: mono-hollow
    )
  ),
  primary: (
    default: (
      base: default,
      hover: action-filled
    ),
    light: (
      base: light-filled,
      hover: action-filled
    ),
    action: (
      base: action-filled,
      hover: action-filled
    ),
    danger: (
      base: danger-filled,
      hover: danger-filled
    ),
    mono: (
      base: mono-filled,
      hover: mono-filled
    )
  ),
  secondary: (
    default: (
      base: default,
      hover: action-filled
    ),
    light: (
      base: light-hollow,
      hover: light-filled
    ),
    action: (
      base: action-hollow,
      hover: action-filled
    ),
    danger: (
      base: danger-hollow,
      hover: danger-filled
    ),
    mono: (
      base: mono-filled,
      hover: mono-hollow
    )
  ),
  tertiary: (
    default: (
      base: default-transparent,
      hover: default-transparent
    ),
    light: (
      base: light-transparent,
      hover: light-transparent
    ),
    action: (
      base: action-transparent,
      hover: action-transparent
    ),
    danger: (
      base: danger-transparent,
      hover: danger-transparent
    ),
    mono: (
      base: mono-transparent,
      hover: mono-transparent
    )
  )
);

$button-styles: (
  default: (
    background: $color-white,
    border: color-scale($color-gray, 7),
    text: $button-text-color
  ),
  default-transparent: (
    text: $button-text-color
  ),
  light-hollow: (
    border: $color-white,
    text: $color-white
  ),
  light-filled: (
    background: $color-white,
    border: $color-white,
    text: $button-text-color
  ),
  light-transparent: (
    text: $color-white
  ),
  action-hollow: (
    border: $action-color,
    text: $action-color
  ),
  action-filled: (
    background: $action-color,
    border: $action-color,
    text: $color-white
  ),
  action-transparent: (
    text: $action-color
  ),
  mono-hollow: (
    background: $color-white,
    border: color-scale($color-gray, 7),
    text: $button-text-color
  ),
  mono-filled: (
    background: $color-black,
    border: $color-black,
    text: $color-white
  ),
  mono-transparent: (
    text: $button-text-color
  ),
  danger-hollow: (
    border: $alert-color,
    text: $alert-color,
    solid-text: $color-white
  ),
  danger-filled: (
    background: $alert-color,
    border: $alert-color,
    text: $color-white
  ),
  danger-transparent: (
    text: $alert-color
  ),
  disabled: (
    background: color-scale($color-gray, 7) !important,
    border: color-scale($color-gray, 7) !important,
    text: $color-white !important
  ),
  disabled-transparent: (
    background: transparent !important,
    border: transparent !important,
    text: $button-text-color !important
  )
);

/// button-size
/// @param {String} $size [md] one of $button-sizes
@mixin button-size($size: md) {
  $properties: map_get($button-sizes, $size);
  $height: map_get($properties, height);
  $font-size: map_get($properties, font);
  $line-height: floor($font-size * $button-line-height-factor);
  $vertical-padding: ($height - 2 - $line-height) / 2;
  $comp: $font-size / 30;
  $top-padding: ceil($vertical-padding + $comp);
  $bottom-padding: $height - 2 - $line-height - $top-padding;

  @if (map_has_key($properties, height)) {
    min-height: $height;
  }

  @if (map_has_key($properties, font)) {
    @include font-size($font-size, $line-height);
  }

  @if (map_has_key($properties, padding)) {
    padding: $top-padding
      map_get($properties, padding)
      $bottom-padding
      map_get($properties, padding);
  }
}

/// button-base
@mixin button-base {
  @include font-style($button-font-style);
  appearance: none;
  border: 1px solid transparent;
  border-radius: $button-radius;
  cursor: pointer;
  display: inline-block;
  line-height: normal;
  margin: $button-margin;
  outline: 0;
  text-align: center;
  text-decoration: none;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;
  vertical-align: middle;
}

/// button-expand
/// @param {*} $expand [true]
@mixin button-expand($expand: true) {
  @if $expand {
    display: block;
    margin-left: 0;
    margin-right: 0;
    width: 100%;
  } @else {
    display: inline-block;
    margin: $button-margin;
    width: auto;
  }
}

/// button-icon
/// We are relying on relative line-height styling (see button-size())
/// to make the icon the height of the font. We then set the icons
/// line height to 1em to be exactly that same size as well.
/// This way we can be sure that the icon does not resize the button
/// and is near perfectly centered.
/// TODO: Will be adjusted later after defining how to build icons.
@mixin button-icon {
  font-size: #{$button-line-height-factor}em;
  line-height: 1em;
  margin: -0.2em 0 0 0;
  vertical-align: middle;
}

/// button-style
/// @param {String} $style [default]
@mixin button-style($style: default) {
  $properties: map_get($button-styles, $style);
  $color: map_get($properties, text);

  background-color: get("background", $properties, transparent);
  border-color: get("border", $properties, transparent);

  color: $color;
}

/// button-scheme
/// @param {String} $scheme [default]
/// @param {String} $prefix ["."]
@mixin button-scheme($type: default, $prefix: ".") {
  $types: map_get($button-schemes, $type);

  @each $type, $styles in $types {
    $type-modifier: if($type == default, "&", "&#{$prefix}#{$type}");

    #{$type-modifier} {
      @include button-style(map_get($styles, base));

      &:hover,
      &:focus {
        @include button-style(map_get($styles, hover));
      }
    }
  }
}

/// button-disabled
@mixin button-disabled($is-transparent: false) {
  $style: if($is-transparent, disabled-transparent, disabled);

  @include button-style($style);
  background-image: none !important;
  cursor: not-allowed;
}

/// button-highlight
@mixin button-highlight($is-transparent: false) {
  @if $is-transparent {
    background-image: none;
    opacity: 0.8;
  } @else {
    background-image: linear-gradient(
      rgba($color-white, 0.2),
      rgba($color-white, 0.2)
    );
    background-position: 0 100%;
    background-repeat: repeat-x;
    background-size: 1px 100%;
  }
}

/// button-busy
@mixin button-busy {
  cursor: wait;
}

/// button-busy-spinner
@mixin button-busy-spinner {
  @include spinner;
  padding: 0;
  margin: 0;
  font-size: 8px;
  line-height: 8px;
  display: block;
  margin: 0 auto;
}

@mixin button-busy-spinner-inline {
  display: inline-block;
  margin-left: spacing(2);
}

/// button-narrow
@mixin button-narrow {
  padding-left: $button-narrow-padding;
  padding-right: $button-narrow-padding;
}
