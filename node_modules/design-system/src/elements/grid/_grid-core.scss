@import "../../tools/type-checking";
@import "../../tools/breakpoints";
@import "../../tools/dimensions";

$grid-columns: 16 !default;
$grid-gutter: spacing(2) !default;
$grid-content-well-max-width: $xl-width !default;

$grid-row-class: "row" !default;
$grid-col-class: "col" !default;
$grid-offset-class: "offset" !default;

@mixin row($full-width: "false") {
  box-sizing: border-box;
  margin: 0 auto;
  width: 100%;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;

  @if ($full-width == "false") and
    is-number($grid-content-well-max-width) and
    ($grid-content-well-max-width != 0) and
    ($grid-content-well-max-width >= $sm-width)
  {
    max-width: $grid-content-well-max-width;
  }
}

@mixin row-reverse() {
  flex-direction: row-reverse;
}

@mixin row-eq-height() {
  align-items: stretch;
}

@mixin row-auto-height() {
  align-items: flex-start;
}

@mixin row-flex-column() {
  flex-direction: column;
}

@mixin col-reverse() {
  flex-direction: column-reverse;
}

/// __apply-at-media-query
/// Will include given @content attaching media query rules
/// based on breakpoint, applying sm as default.
/// @param {String} $breakpoint ["sm"]
@mixin __apply-at-media-query($breakpoint: "sm") {
  @if $breakpoint == "sm" {
    @content;
  } @else {
    $media-query: map-get($breakpoints-up, $breakpoint);

    @if ($media-query) {
      @media #{$media-query} {
        @content;
      }
    } @else {
      @error "At media rule mixin, requires $breakpoint argument to be one of the existing breakpoints (#{$breakpoint-up-prefixes})";
    }
  }
}

/// __col
/// evaluate column inside factory mixin
/// @access private
/// @param {Number|String} $col-number
@mixin __col($col-number) {
  display: flex;

  @if is-number($col-number) {
    @if $col-number > $grid-columns or $col-number == 0 {
      @warn "Column number must be greater than 0 and less than or equal to total number of columns in the grid (#{$grid-columns})";
    } @else {
      box-sizing: border-box;
      flex-basis: 100% / $grid-columns * $col-number;
      max-width: 100% / $grid-columns * $col-number;
      padding: $grid-gutter;
    }
  } @else if $col-number == "auto" {
    box-sizing: border-box;
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
    padding: $grid-gutter;
  } @else {
    @warn "Column number argument must either be the string 'auto' or a number greater than 0 and less than or equal to total number of columns in the grid (#{$grid-columns})";
  }
}

/// col
/// @param {*} $breakpoint ['sm']
/// @param {*} $col-number ['auto']
@mixin col($breakpoint: "sm", $col-number: "auto") {
  // If no breakpoint is passed, use first argument as $col-number
  @if is-number($breakpoint) {
    $col-number: $breakpoint;
  }

  @include __apply-at-media-query($breakpoint) {
    display: flex;
    @include __col($col-number);
  }
}

/// __col-offset
/// evaluate column inside factory mixin
/// @access private
/// @param {*} $offset-number
@mixin __col-offset($offset-number) {
  @if not(is-number($offset-number)) {
    @warn "Column offset number must be a number (only argument or second argument in the col mixin)";
  } @else if $offset-number == 0 {
    @warn "Column offset number must be greater than 0 and less than or equal to total number of columns in the grid (#{$grid-columns})";
  } @else if $offset-number > $grid-columns {
    @warn "Column offset number must be greater than 0 and less than or equal to total number of columns in the grid (#{$grid-columns})";
  } @else {
    margin-left: 100% / $grid-columns * $offset-number;
  }
}

/// col-offset
/// @param {*} $breakpoint ['sm']
/// @param {*} $offset-number [0]
@mixin col-offset($breakpoint: "sm", $offset-number: 0) {
  // If no breakpoint is passed, use first argument as $offset-number
  @if is-number($breakpoint) {
    $offset-number: $breakpoint;
  }

  @include __apply-at-media-query($breakpoint) {
    @include __col-offset($offset-number);
  }
}

/// start
/// @param {*} $breakpoint ['sm']
@mixin start($breakpoint: "sm") {
  @include __apply-at-media-query($breakpoint) {
    justify-content: flex-start;
  }
}

/// center
/// @param {*} $breakpoint ['sm']
@mixin center($breakpoint: "sm") {
  @include __apply-at-media-query($breakpoint) {
    justify-content: center;
  }
}

/// end
/// @param {*} $breakpoint ['sm']
@mixin end($breakpoint: "sm") {
  @include __apply-at-media-query($breakpoint) {
    justify-content: flex-end;
  }
}

/// top
/// @param {*} $breakpoint ['sm']
@mixin top($breakpoint: "sm") {
  @include __apply-at-media-query($breakpoint) {
    align-items: flex-start;
  }
}

/// middle
/// @param {*} $breakpoint ['sm']
@mixin middle($breakpoint: "sm") {
  @include __apply-at-media-query($breakpoint) {
    align-items: center;
  }
}

/// bottom
/// @param {*} $breakpoint ['sm']
@mixin bottom($breakpoint: "sm") {
  @include __apply-at-media-query($breakpoint) {
    align-items: flex-end;
  }
}

/// around
/// @param {*} $breakpoint ['sm']
@mixin around($breakpoint: "sm") {
  @include __apply-at-media-query($breakpoint) {
    justify-content: space-around;
  }
}

/// between
/// @param {*} $breakpoint ['sm']
@mixin between($breakpoint: "sm") {
  @include __apply-at-media-query($breakpoint) {
    justify-content: space-between;
  }
}

/// first
/// @param {*} $breakpoint ['sm']
@mixin first($breakpoint: "sm") {
  @include __apply-at-media-query($breakpoint) {
    order: -1;
  }
}

/// last
/// @param {*} $breakpoint ['sm']
@mixin last($breakpoint: "sm") {
  @include __apply-at-media-query($breakpoint) {
    order: 1;
  }
}

/// grid-gutter-base
/// Apply gutter
@mixin grid-gutter-base {
  padding: 0 $grid-gutter;
}

/// grid-no-gutter
/// Remove gutter
@mixin grid-no-gutter {
  padding: 0;
}
