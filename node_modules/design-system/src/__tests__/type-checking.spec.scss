@import "true";
@import "../tools/type-checking";

@include describe("is-empty() function") {
  @include it("returns true for a null value") {
    @include assert-true(is-empty(null));
  }

  @include it("returns true for a false value") {
    @include assert-true(is-empty(false));
  }

  @include it("returns true for a empty string") {
    @include assert-true(is-empty(""));
  }

  @include it("returns true for a empty list/map") {
    @include assert-true(is-empty(()));
  }

  @include it("returns true for a zero value") {
    @include assert-true(is-empty(0));
  }

  @include it("returns false for valid number") {
    @include assert-false(is-empty(10px));
  }

  @include it("returns false for valid string") {
    @include assert-false(is-empty("10px"));
  }

  @include it("returns false for valid list") {
    @include assert-false(is-empty(("a", "b", "c")));
  }
}

@include describe("list-contains() function") {
  $list: ("a", "b", "c");

  @include it("returns true for existing key") {
    @include assert-true(list-contains($list, "a"));
  }

  @include it("returns false for missing key") {
    @include assert-false(list-contains($list, "z"));
  }

  @include it("returns false for empty list") {
    @include assert-false(list-contains((), "a"));
  }

  @include it("returns false for empty key") {
    @include assert-false(list-contains($list, ""));
  }
}

@include describe("is-number() function") {
  @include it("returns true for an integer") {
    @include assert-true(is-number(1));
  }

  @include it("returns true for a negative integer") {
    @include assert-true(is-number(-4));
  }

  @include it("returns true for a large integer") {
    @include assert-true(is-number(12342432423));
  }

  @include it("returns true for a decimal") {
    @include assert-true(is-number(2.4));
  }

  @include it("returns false for strings") {
    @include assert-false(is-number("34"));
  }
}

@include describe("is-duration() function") {
  @include it("returns true for a time in seconds") {
    @include assert-true(is-duration(1.5s));
  }

  @include it("returns true for a time in milliseconds") {
    @include assert-true(is-duration(4ms));
  }

  @include it("returns false for unit-less number") {
    @include assert-false(is-duration(2));
  }

  @include it("returns false for strings") {
    @include assert-false(is-duration("34"));
  }
}

@include describe("is-angle() function") {
  @include it("returns true for an angle in deg") {
    @include assert-true(is-angle(30deg));
  }

  @include it("returns true for an angle in rad") {
    @include assert-true(is-angle(2.3rad));
  }

  @include it("returns true for an angle in grad") {
    @include assert-true(is-angle(10.5grad));
  }

  @include it("returns true for an angle in turn") {
    @include assert-true(is-angle(1turn));
  }

  @include it("returns false for strings") {
    @include assert-false(is-angle("34"));
  }
}

@include describe("is-frequency() function") {
  @include it("returns true for an angle in deg") {
    @include assert-true(is-frequency(10hz));
  }

  @include it("returns true for an angle in rad") {
    @include assert-true(is-frequency(20khz));
  }

  @include it("returns false for strings") {
    @include assert-false(is-frequency("34"));
  }
}

@include describe("is-integer() function") {
  @include it("returns true for an integer") {
    @include assert-true(is-integer(1));
  }

  @include it("returns true for a negative integer") {
    @include assert-true(is-integer(-4));
  }

  @include it("returns true for a large integer") {
    @include assert-true(is-integer(12342432423));
  }

  @include it("returns false for a decimal") {
    @include assert-false(is-integer(2.4));
  }

  @include it("returns false for strings") {
    @include assert-false(is-integer("34"));
  }
}

@include describe("is-relative-length() function") {
  @each $unit in 1em 1ex 1ch 1rem 1vw 1vh 1vmin 1vmax {
    @include it("returns true for " + unit($unit)) {
      @include assert-true(is-relative-length($unit));
    }
  }

  @include it("returns false for strings") {
    @include assert-false(is-relative-length("34"));
  }
}

@include describe("is-absolute-length() function") {
  @each $unit in 1cm 1mm 1in 1px 1pt 1pc {
    @include it("returns true for " + unit($unit)) {
      @include assert-true(is-absolute-length($unit));
    }
  }

  @include it("returns false for strings") {
    @include assert-false(is-absolute-length("34"));
  }
}

@include describe("is-percentage() function") {
  @include it("returns true for a percentage value") {
    @include assert-true(is-percentage(100%));
  }

  @include it("returns false for a non-percentage value") {
    @include assert-false(is-percentage(50px));
  }

  @include it("returns false for a unit-less value") {
    @include assert-false(is-percentage(50));
  }

  @include it("returns false for strings") {
    @include assert-false(is-percentage("34"));
  }
}

@include describe("is-length() function") {
  @each $unit in 1em 1ex 1ch 1rem 1vw 1vh 1vmin 1vmax 1cm 1mm 1in 1px 1pt 1pc {
    @include it("returns true for " + unit($unit)) {
      @include assert-true(is-length($unit));
    }
  }

  @include it("returns false for strings") {
    @include assert-false(is-length("34"));
  }
}

@include describe("is-resolution() function") {
  @each $unit in 1dpi 1dpcm 1dppx {
    @include it("returns true for " + unit($unit)) {
      @include assert-true(is-resolution($unit));
    }
  }

  @include it("returns false for strings") {
    @include assert-false(is-resolution("34"));
  }
}

@include describe("is-position() function") {
  @each $position in top bottom left right center {
    @include it("returns true for " + $position) {
      @include assert-true(is-position($position));
    }
  }

  @include it("returns false for a non-position string") {
    @include assert-false(is-position("test"));
  }
}
