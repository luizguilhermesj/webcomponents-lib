@import "true";
@import "../tools/breakpoints";

$_is-test: true;

@include describe("from breakpoint @mixin") {
  @include it("Breakpoint sizes are setup correctly matching design specs") {
    @include assert-equal($sm-width, 480px);
    @include assert-equal($md-width, 768px);
    @include assert-equal($lg-width, 960px);
    @include assert-equal($xl-width, 1280px);
  }

  @include it("Outputs breakpoint media query when nested inside class") {
    @include assert {
      @include output {
        .color-box {
          @include from("md") {
            color: blue;
          }
        }
      }

      @include expect {
        @media only screen and (min-width: #{$md-width}) {
          .color-box {
            color: blue;
          }
        }
      }
    }
  }

  @include it("Outputs breakpoint media query with class nested inside") {
    @include assert {
      @include output {
        @include from("md") {
          .color-box {
            color: blue;
          }
        }
      }

      @include expect {
        @media only screen and (min-width: #{$md-width}) {
          .color-box {
            color: blue;
          }
        }
      }
    }
  }

  @include it("Outputs breakpoint media query with orientation mode") {
    @include assert {
      @include output {
        .color-box {
          @include from("md", "landscape") {
            color: red;
          }
        }
      }

      @include expect {
        @media only screen and (min-width: #{$md-width}) and (orientation: landscape) {
          .color-box {
            color: red;
          }
        }
      }
    }
  }

  @include it(
    "Outputs breakpoint media query skipping invalid orientation mode"
  ) {
    @include assert {
      @include output {
        @include from("md", "horizontal") {
          .color-box {
            color: yellow;
          }
        }
      }

      @include expect {
        error: "Invalid @media query screen orientation mode ( horizontal ).";
      }
    }
  }

  @include it("Outputs error for non existing/valid breakpoint value") {
    @include assert {
      @include output {
        @include from("no-breakpoint") {
          .color-box {
            color: red;
          }
        }
      }

      @include expect {
        error: "Invalid @media query breakpoint width ( no-breakpoint ).";
      }
    }
  }

  @include it(
    "Outputs breakpoint media queries with the passed prefix class selector"
  ) {
    @include assert {
      @include output {
        .tooltip {
          $modifier: "position-tl";
          @include render-for-breakpoints("&--#{$modifier}--") {
            bottom: 100%;
            left: 0;
            margin-bottom: 16px;
          }
        }
      }

      @include expect {
        @media only screen and (min-width: #{$md-width}) {
          .tooltip--position-tl--from-md {
            bottom: 100%;
            left: 0;
            margin-bottom: 16px;
          }
        }

        @media only screen and (min-width: #{$lg-width}) {
          .tooltip--position-tl--from-lg {
            bottom: 100%;
            left: 0;
            margin-bottom: 16px;
          }
        }

        @media only screen and (min-width: #{$xl-width}) {
          .tooltip--position-tl--from-xl {
            bottom: 100%;
            left: 0;
            margin-bottom: 16px;
          }
        }
      }
    }
  }

  @include it("Outputs error for non existing/valid prefix value") {
    @include assert {
      @include output {
        .tooltip {
          @include render-for-breakpoints() {
            bottom: 100%;
            left: 0;
            margin-bottom: 16px;
          }
        }
      }

      @include expect {
        .tooltip {
          error: "Empty value for argument $prefix-selector. A valid string prefix is required to create the output!";
        }
      }
    }
  }
}
