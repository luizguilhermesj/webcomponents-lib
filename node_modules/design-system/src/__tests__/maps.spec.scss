@import "true";
@import "../tools/maps";

$_is-test: true;

$tokens: (
  a: (
    b: (
      c: 15%,
      d: 50%
    )
  )
);

@include describe("get() function") {
  @include it("fails when given an empty/invalid $map argument") {
    @include assert-equal(
      get("a.b.c", ()),
      "ERROR: The argument $map: `` is of incorrect type: `list`. Type of `map` is required!"
    );
  }

  @include it("returns given default value when key not found") {
    @include assert-equal(get("a.b.x", $tokens, "default"), "default");
  }

  @include it("returns nested key value when found") {
    @include assert-equal(get("a.b.c", $tokens), 15%);
  }

  @include it("returns nested key value when found ignoring default") {
    @include assert-equal(get("a.b.c", $tokens, "default"), 15%);
  }
}

@include describe("deep-map-get() function") {
  @include it("fails when given an invalid $map argument") {
    @include assert-equal(
      deep-map-get(2010, "a" "b" "c" ...),
      "ERROR: The argument $map: `2010` is of incorrect type: `number`. Type of `map` is required!"
    );
  }

  @include it("returns valid value when nested key sequence was found") {
    @include assert-equal(deep-map-get($tokens, "a" "b" "c" ...), 15%);
  }

  @include it("returns null value when an invalid key sequence was given") {
    @include assert-equal(deep-map-get($tokens, "a.b.c"), null);
  }
}

@include describe("deep-map-check() function") {
  @include it("fails when given an invalid $map argument") {
    @include assert-equal(
      deep-map-get(2010, "a" "b" "c" ...),
      "ERROR: The argument $map: `2010` is of incorrect type: `number`. Type of `map` is required!"
    );
  }

  @include it("returns true when all nested keys were found") {
    @include assert-true(deep-map-check($tokens, "a" "b" "c" ...));
  }

  @include it("returns false when at least one of nested keys wasn't found") {
    @include assert-false(deep-map-check($tokens, "a" "x" "c" ...));
  }
}
