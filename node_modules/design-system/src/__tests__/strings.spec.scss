@import "true";
@import "../tools/strings";

$_is-test: true;

$original: "This is just an example";
$modified: "This is not an example";

@include describe("str-replace() function") {
  @include it("returns original string when search key wasn't found") {
    @include assert-equal(str-replace($original, "empty", "not"), $original);
  }

  @include it("returns modified string when occurrence was found") {
    @include assert-equal(str-replace($original, "just", "not"), $modified);
  }

  @include it("fails when given an invalid $string argument") {
    @include assert-equal(
      str-replace(2010, "search", "replace"),
      "ERROR: The argument $string: `2010` is of incorrect type: `number`. Type of `string` is required!"
    );
  }

  @include it("fails when given an invalid $search argument") {
    @include assert-equal(
      str-replace("string", 2010, "replace"),
      "ERROR: The argument $search: `2010` is of incorrect type: `number`. Type of `string` is required!"
    );
  }

  @include it("fails when given an invalid $replace argument") {
    @include assert-equal(
      str-replace("string", "search", 2010),
      "ERROR: The argument $replace: `2010` is of incorrect type: `number`. Type of `string` is required!"
    );
  }
}

@include describe("str-explode() function") {
  @include it("explodes string into char chunks when no delimiter was given") {
    @include assert-equal(str-explode("test"), "t" "e" "s" "t");
  }

  @include it("explodes string into chunks based given delimiter") {
    @include assert-equal(str-explode("cut in three", " "), "cut" "in" "three");
  }

  @include it("fails when given an invalid $string argument") {
    @include assert-equal(
      str-explode(2010, " "),
      "ERROR: The argument $string: `2010` is of incorrect type: `number`. Type of `string` is required!"
    );
  }

  @include it("fails when given an invalid $delimiter argument") {
    @include assert-equal(
      str-explode("cut in three", 2010),
      "ERROR: The argument $delimiter: `2010` is of incorrect type: `number`. Type of `string` is required!"
    );
  }
}
