@import "type-checking";

$sm-width: 480px;
$md-width: 768px;
$lg-width: 960px;
$xl-width: 1280px;

$breakpoints: (
  sm: $sm-width,
  md: $md-width,
  lg: $lg-width,
  xl: $xl-width
);

$screen-orientation-modes: ("landscape", "portrait");

/// upper-bound
/// @param {*} $px
@function upper-bound($px) {
  @if (is-number($px)) {
    @return $px - 1;
  }

  @return error("#{$px} is not a valid pixel unit");
}

$breakpoint-sm-only: "only screen and (max-width: #{upper-bound($sm-width)})";
$breakpoint-md-up: "only screen and (min-width: #{$md-width})";
$breakpoint-md-only: "only screen and (min-width: #{$sm-width}) and (max-width: #{upper-bound($md-width)})";
$breakpoint-lg-up: "only screen and (min-width: #{$lg-width})";
$breakpoint-lg-only: "only screen and (min-width: #{$md-width}) and (max-width: #{upper-bound($lg-width)})";
$breakpoint-xl-up: "only screen and (min-width: #{$xl-width})";

$breakpoint-up-prefixes: ("sm", "md", "lg", "xl");
$breakpoints-up: (
  md: $breakpoint-md-up,
  lg: $breakpoint-lg-up,
  xl: $breakpoint-xl-up
);

/// from
/// apply breakpoint from size, also based on orientation (optional)
/// @param {String|Number} $breakpoint one of $breakpoint-up-prefixes, fails on custom width in px
/// @param {String} $orientation [''] one of [landscape, portrait]
@mixin from($breakpoint, $orientation: "") {
  $bp-exists: list-contains($breakpoint-up-prefixes, $breakpoint);
  $mode-exists: list-contains($screen-orientation-modes, $orientation);

  $invalid-mode: not(is-empty($orientation)) and not($mode-exists);
  $width: if($bp-exists, map-get($breakpoints, $breakpoint), $breakpoint);

  @if (not($bp-exists) or $invalid-mode) {
    $error: if(
      $invalid-mode,
      "Invalid @media query screen orientation mode ( #{$orientation} ).",
      "Invalid @media query breakpoint width ( #{$width} )."
    );

    @include error($error);
  } @else {
    @if ($mode-exists) {
      @media only screen and (min-width: $width) and (orientation: $orientation) {
        @content;
      }
    } @else {
      @media only screen and (min-width: $width) {
        @content;
      }
    }
  }
}

/// render-for-breakpoints
/// @param {String} $prefix-selector name of your pattern
/// @param {String} $range default is "from"
@mixin render-for-breakpoints($prefix-selector: null, $range: "from") {
  $range-separator: #{$range + "-"};

  @if (is-empty($prefix-selector)) {
    @include error(
      "Empty value for argument $prefix-selector. A valid string prefix is required to create the output!"
    );
  } @else {
    @each $bp in map_keys(map-remove($breakpoints, sm)) {
      @include from($bp) {
        #{$prefix-selector + $range-separator + $bp} {
          @content;
        }
      }
    }
  }
}
