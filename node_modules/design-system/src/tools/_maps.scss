@import "type-checking";
@import "strings";

/// get
/// Search for any value contained within nested maps, by using
/// dot notation as the key argument
///
/// Example of use:
/// get("border.radius.xs")
///
/// Dependencies:
/// deep-map-check, deep-map-get, str-explode
///
/// @param {String} $key
/// @param {Object} $map []
/// @return {*} (it may return anything as a result)
@function get($key, $map: (), $default: "") {
  $keys: str-explode($key, ".");

  @if not(deep-map-check($map, $keys...)) {
    @return $default;
  }

  @return deep-map-get($map, $keys...);
}

/// deep-map-get
/// Get a value from nested map by the keys
///
/// Example of use:
/// deep-map-get($settings, "font", "weight")
///
/// @param {Object} $map
/// @param {String[]} $keys
///
/// @return {*} (it may return anything as a result)
@function deep-map-get($map, $keys...) {
  @if not(is-map($map)) {
    @return error(
      "The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `map` is required!"
    );
  }

  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

/// deep-map-check
/// Check if nested map has a value by the keys
//
/// Example of use:
/// deep-map-check($nested-map, "key-1", "key-2")
///
/// @param {Object} $map
/// @param {String[]} $keys
///
/// @return {Boolean}
@function deep-map-check($map, $keys...) {
  @if not(is-map($map)) {
    @return error(
      "The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `map` is required!"
    );
  }

  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }

    $map: map-get($map, $key);
  }

  @return true;
}

/// deep-map-merge
/// @param {*} $map
/// @param {*} $maps...
@function deep-map-merge($map, $maps...) {
  $last: nth($maps, -1);
  $deep: $last == true;
  $max: if($deep, length($maps) - 1, length($maps));

  // Loop through all maps in $maps...
  @for $i from 1 through $max {
    // Store current map
    $current: nth($maps, $i);

    // If not in deep mode, simply merge current map with map
    @if not $deep {
      $map: map-merge($map, $current);
    } @else {
      // If in deep mode, loop through all tuples in current map
      @each $key, $value in $current {
        // If value is a nested map and same key from map is a nested map as well
        @if is-map($map) and is-map(map-get($map, $key)) {
          // Recursive extend
          $value: deep-map-merge(map-get($map, $key), $value, true);
        }

        // Merge current tuple with map
        $map: map-merge(
          $map,
          (
            $key: $value
          )
        );
      }
    }
  }

  @return $map;
}
